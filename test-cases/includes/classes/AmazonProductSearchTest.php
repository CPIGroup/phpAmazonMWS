<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-12 at 13:17:14.
 */
class AmazonProductSearchTest extends PHPUnit_Framework_TestCase {

    /**
     * @var AmazonProductSearch
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->resetLog();
        $this->object = new AmazonProductSearch('BigKitchen', null, true);
        $this->object->setConfig('/var/www/athena/plugins/amazon/newAmazon/test-cases/test-config.php');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    
    public function testSetUp(){
        $obj = new AmazonProductSearch('BigKitchen', 'platinum', true);
        
        $o = $obj->getOptions();
        $this->assertArrayHasKey('Query',$o);
        $this->assertEquals('platinum', $o['Query']);
    }
    
    public function testSetQuery(){
        $this->assertFalse($this->object->setQuery(null)); //can't be nothing
        $this->assertFalse($this->object->setQuery(5)); //can't be an int
        $this->assertNull($this->object->setQuery('platinum'));
        $o = $this->object->getOptions();
        $this->assertArrayHasKey('Query',$o);
        $this->assertEquals('platinum',$o['Query']);
    }
    
    public function testSetContextId(){
        $this->assertFalse($this->object->setContextId(null)); //can't be nothing
        $this->assertFalse($this->object->setContextId(5)); //can't be an int
        $this->assertNull($this->object->setContextId('Kitchen'));
        $o = $this->object->getOptions();
        $this->assertArrayHasKey('QueryContextId',$o);
        $this->assertEquals('Kitchen',$o['QueryContextId']);
    }
    
    public function testSearchProducts(){
        $this->resetLog();
        $this->object->setMock(true,'searchProducts.xml');
        $this->assertFalse($this->object->searchProducts()); //no query yet
        $this->object->setQuery('platinum');
        
        $this->assertNull($this->object->searchProducts());
        
        $o = $this->object->getOptions();
        $this->assertEquals('ListMatchingProducts',$o['Action']);
        
        $check = $this->parseLog();
        $this->assertEquals('Single Mock File set: searchProducts.xml',$check[1]);
        $this->assertEquals('Search Query must be set in order to search for a query!',$check[2]);
        $this->assertEquals('Fetched Mock File: mock/searchProducts.xml',$check[3]);
        
        return $this->object;
    }
    
    /**
     * @depends testSearchProducts
     */
    public function testGetProduct($o){
        $product = $o->getProduct(0);
        $this->assertInternalType('object',$product);
        
        $list = $o->getProduct(null);
        $this->assertInternalType('array',$list);
        $this->assertArrayHasKey(0,$list);
        $this->assertEquals($product,$list[0]);
        
        $default = $o->getProduct();
        $this->assertEquals($list,$default);
        
        $check = $product->getData();
        $this->assertArrayHasKey('Identifiers',$check);
        $this->assertArrayHasKey('AttributeSets',$check);
        $this->assertArrayHasKey('Relationships',$check);
        $this->assertArrayHasKey('SalesRankings',$check);
        
        $this->assertFalse($this->object->getProduct()); //not fetched yet for this object
    }
    
    /**
     * Resets log for next test
     */
    protected function resetLog(){
        file_put_contents('log.txt','');
    }
    
    /**
     * gets the log contents
     */
    protected function getLog(){
        return file_get_contents('log.txt');
    }
    
    /**
     * gets log and returns messages in an array
     * @param string $s pre-fetched log contents
     * @return array list of message strings
     */
    protected function parseLog($s = null){
        if (!$s){
            $s = $this->getLog();
        }
        $temp = explode("\n",$s);
        
        $return = array();
        foreach($temp as $x){
            $tempo = explode('] ',$x);
            $return[] = trim($tempo[1]);
        }
        array_pop($return);
        return $return;
    }

}
