<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2012-12-12 at 13:17:14.
 */
class AmazonReportTest extends PHPUnit_Framework_TestCase {

    /**
     * @var AmazonReport
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->resetLog();
        $this->object = new AmazonReport('BigKitchen', null, true, null, '/var/www/athena/plugins/amazon/newAmazon/test-cases/test-config.php');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    
    public function testSetUp(){
        $obj = new AmazonReport('BigKitchen', '77');
        
        $o = $obj->getOptions();
        $this->assertArrayHasKey('ReportId',$o);
        $this->assertEquals('77', $o['ReportId']);
    }
    
    public function testSetReportId(){
        $this->assertNull($this->object->setReportId(777));
        $o = $this->object->getOptions();
        $this->assertArrayHasKey('ReportId',$o);
        $this->assertEquals(777,$o['ReportId']);
        $this->assertNull($this->object->setReportId('777')); //works for number strings
        $this->assertFalse($this->object->setReportId('five')); //but not other strings
        $this->assertFalse($this->object->setReportId(null)); //won't work for other things
    }
    
    public function testFetchReport(){
        $this->resetLog();
        $this->object->setMock(true,'fetchReport.xml');
        
        $this->assertFalse($this->object->fetchReport()); //no report ID set yet
        
        $this->object->setReportId('777');
        $ok = $this->object->fetchReport(); //now it is good
        $this->assertNull($ok);
        
        $o = $this->object->getOptions();
        $this->assertEquals('GetReport',$o['Action']);
        
        $check = $this->parseLog();
        $this->assertEquals('Single Mock File set: fetchReport.xml',$check[1]);
        $this->assertEquals('Report ID must be set in order to fetch it!',$check[2]);
        $this->assertEquals('Fetched Mock File: mock/fetchReport.xml',$check[3]);
        
        return $this->object;
        
    }
    
    /**
     * @depends testFetchReport
     */
    public function testSaveReport($o){
        $path = '/var/www/athena/plugins/amazon/newAmazon/test-cases/mock/saveReport.xml';
        $path2 = '/var/www/athena/plugins/amazon/newAmazon/test-cases/mock/fetchReport.xml';
        $o->saveReport($path);
        $check = $this->parseLog();
        $this->assertEquals("Successfully saved report #777 at $path",$check[1]);
        $this->assertFileEquals($path2, $path);
        $this->assertFalse($this->object->saveReport('here')); //not fetched yet for this object
    }
    
    /**
     * Resets log for next test
     */
    protected function resetLog(){
        file_put_contents('log.txt','');
    }
    
    /**
     * gets the log contents
     */
    protected function getLog(){
        return file_get_contents('log.txt');
    }
    
    /**
     * gets log and returns messages in an array
     * @param string $s pre-fetched log contents
     * @return array list of message strings
     */
    protected function parseLog($s = null){
        if (!$s){
            $s = $this->getLog();
        }
        $temp = explode("\n",$s);
        
        $return = array();
        foreach($temp as $x){
            $tempo = explode('] ',$x);
            $return[] = trim($tempo[1]);
        }
        array_pop($return);
        return $return;
    }

}
